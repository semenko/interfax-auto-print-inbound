################################################## 
# Inbound_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.interfax.net
##############################

class ns0:
    targetNamespace = "http://www.interfax.net"

    class ResendResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ResendResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ResendResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"EmailsSent"), aname="_EmailsSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._EmailsSent = None
                    return
            Holder.__name__ = "ResendResult_Holder"
            self.pyclass = Holder

    class InboundEmailsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "InboundEmailsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InboundEmailsResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","ArrayOfInboundLogEmail",lazy=False)(pname=(ns,"InboundEmails"), aname="_InboundEmails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._InboundEmails = None
                    return
            Holder.__name__ = "InboundEmailsResult_Holder"
            self.pyclass = Holder

    class ArrayOfInboundLogEmail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ArrayOfInboundLogEmail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfInboundLogEmail_Def.schema
            TClist = [GTD("http://www.interfax.net","InboundLogEmail",lazy=False)(pname=(ns,"InboundLogEmail"), aname="_InboundLogEmail", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._InboundLogEmail = []
                    return
            Holder.__name__ = "ArrayOfInboundLogEmail_Holder"
            self.pyclass = Holder

    class InboundLogEmail_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "InboundLogEmail")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.InboundLogEmail_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"EmailAddress"), aname="_EmailAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageStatus"), aname="_MessageStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._EmailAddress = None
                    self._MessageStatus = None
                    self._CompletionTime = None
                    return
            Holder.__name__ = "InboundLogEmail_Holder"
            self.pyclass = Holder

    class ListType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ListType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ArrayOfMessageItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ArrayOfMessageItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfMessageItem_Def.schema
            TClist = [GTD("http://www.interfax.net","MessageItem",lazy=False)(pname=(ns,"MessageItem"), aname="_MessageItem", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageItem = []
                    return
            Holder.__name__ = "ArrayOfMessageItem_Holder"
            self.pyclass = Holder

    class MessageItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "MessageItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MessageItem_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhoneNumber"), aname="_PhoneNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemoteCSID"), aname="_RemoteCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageStatus"), aname="_MessageStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Pages"), aname="_Pages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageSize"), aname="_MessageSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"MessageType"), aname="_MessageType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ReceiveTime"), aname="_ReceiveTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CallerID"), aname="_CallerID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageRecordingDuration"), aname="_MessageRecordingDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageID = None
                    self._PhoneNumber = None
                    self._RemoteCSID = None
                    self._MessageStatus = None
                    self._Pages = None
                    self._MessageSize = None
                    self._MessageType = None
                    self._ReceiveTime = None
                    self._CallerID = None
                    self._MessageRecordingDuration = None
                    return
            Holder.__name__ = "MessageItem_Holder"
            self.pyclass = Holder

    class QueryForm_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "QueryForm")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryForm_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserID"), aname="_UserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"OnlyNewMessages"), aname="_OnlyNewMessages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","QueryCondition",lazy=False)(pname=(ns,"RecieveTime"), aname="_RecieveTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TransactionID = None
                    self._UserID = None
                    self._OnlyNewMessages = None
                    self._RecieveTime = None
                    return
            Holder.__name__ = "QueryForm_Holder"
            self.pyclass = Holder

    class QueryCondition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "QueryCondition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryCondition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"Verb"), aname="_Verb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VerbData"), aname="_VerbData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Verb = None
                    self._VerbData = None
                    return
            Holder.__name__ = "QueryCondition_Holder"
            self.pyclass = Holder

    class QueryControl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "QueryControl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryControl_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"MaxChunkSize"), aname="_MaxChunkSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"FromRecordNumber"), aname="_FromRecordNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MaxChunkSize = None
                    self._FromRecordNumber = None
                    return
            Holder.__name__ = "QueryControl_Holder"
            self.pyclass = Holder

    class FaxQueryResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "FaxQueryResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaxQueryResult_Def.schema
            TClist = [GTD("http://www.interfax.net","ArrayOfMessageItem2",lazy=False)(pname=(ns,"MessageItems"), aname="_MessageItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalTransactionsNum"), aname="_TotalTransactionsNum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageItems = None
                    self._ResultCode = None
                    self._TotalTransactionsNum = None
                    return
            Holder.__name__ = "FaxQueryResult_Holder"
            self.pyclass = Holder

    class ArrayOfMessageItem2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ArrayOfMessageItem2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfMessageItem2_Def.schema
            TClist = [GTD("http://www.interfax.net","MessageItem2",lazy=False)(pname=(ns,"MessageItem2"), aname="_MessageItem2", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MessageItem2 = []
                    return
            Holder.__name__ = "ArrayOfMessageItem2_Holder"
            self.pyclass = Holder

    class MessageItem2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "MessageItem2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.MessageItem2_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"UserID"), aname="_UserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PhoneNumber"), aname="_PhoneNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemoteCSID"), aname="_RemoteCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageStatus"), aname="_MessageStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Pages"), aname="_Pages", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageSize"), aname="_MessageSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"MessageType"), aname="_MessageType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"ReceiveTime"), aname="_ReceiveTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CallerID"), aname="_CallerID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageRecordingDuration"), aname="_MessageRecordingDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ImageStatus"), aname="_ImageStatus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfEmails"), aname="_NumOfEmails", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfFailedEmails"), aname="_NumOfFailedEmails", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UserID = None
                    self._MessageID = None
                    self._PhoneNumber = None
                    self._RemoteCSID = None
                    self._MessageStatus = None
                    self._Pages = None
                    self._MessageSize = None
                    self._MessageType = None
                    self._ReceiveTime = None
                    self._CallerID = None
                    self._MessageRecordingDuration = None
                    self._ImageStatus = None
                    self._NumOfEmails = None
                    self._NumOfFailedEmails = None
                    return
            Holder.__name__ = "MessageItem2_Holder"
            self.pyclass = Holder

    class ImageChunkResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.net"
        type = (schema, "ImageChunkResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ImageChunkResult_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"buffer"), aname="_buffer", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SourceFileType"), aname="_SourceFileType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._buffer = None
                    self._ResultCode = None
                    self._SourceFileType = None
                    return
            Holder.__name__ = "ImageChunkResult_Holder"
            self.pyclass = Holder

    class ResendInboundToEmail_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResendInboundToEmail"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.ResendInboundToEmail_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RequestedUserID"), aname="_RequestedUserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"OnlyToFailed"), aname="_OnlyToFailed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"EmailAddress"), aname="_EmailAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","ResendInboundToEmail")
            kw["aname"] = "_ResendInboundToEmail"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._RequestedUserID = None
                    self._TransactionID = None
                    self._OnlyToFailed = None
                    self._EmailAddress = None
                    return
            Holder.__name__ = "ResendInboundToEmail_Holder"
            self.pyclass = Holder

    class ResendInboundToEmailResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResendInboundToEmailResponse"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.ResendInboundToEmailResponse_Dec.schema
            TClist = [GTD("http://www.interfax.net","ResendResult",lazy=False)(pname=(ns,"ResendInboundToEmailResult"), aname="_ResendInboundToEmailResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","ResendInboundToEmailResponse")
            kw["aname"] = "_ResendInboundToEmailResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResendInboundToEmailResult = None
                    return
            Holder.__name__ = "ResendInboundToEmailResponse_Holder"
            self.pyclass = Holder

    class GetInboundLogEmails_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetInboundLogEmails"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetInboundLogEmails_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RequestedUserID"), aname="_RequestedUserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetInboundLogEmails")
            kw["aname"] = "_GetInboundLogEmails"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._RequestedUserID = None
                    self._TransactionID = None
                    return
            Holder.__name__ = "GetInboundLogEmails_Holder"
            self.pyclass = Holder

    class GetInboundLogEmailsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetInboundLogEmailsResponse"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetInboundLogEmailsResponse_Dec.schema
            TClist = [GTD("http://www.interfax.net","InboundEmailsResult",lazy=False)(pname=(ns,"GetInboundLogEmailsResult"), aname="_GetInboundLogEmailsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetInboundLogEmailsResponse")
            kw["aname"] = "_GetInboundLogEmailsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetInboundLogEmailsResult = None
                    return
            Holder.__name__ = "GetInboundLogEmailsResponse_Holder"
            self.pyclass = Holder

    class GetList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetList"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetList_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","ListType",lazy=False)(pname=(ns,"LType"), aname="_LType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxItems"), aname="_MaxItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","ArrayOfMessageItem",lazy=False)(pname=(ns,"objMessageItem"), aname="_objMessageItem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetList")
            kw["aname"] = "_GetList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._LType = None
                    self._MaxItems = None
                    self._objMessageItem = None
                    return
            Holder.__name__ = "GetList_Holder"
            self.pyclass = Holder

    class GetListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetListResponse"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetListResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"GetListResult"), aname="_GetListResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","ArrayOfMessageItem",lazy=False)(pname=(ns,"objMessageItem"), aname="_objMessageItem", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetListResponse")
            kw["aname"] = "_GetListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetListResult = None
                    self._objMessageItem = None
                    return
            Holder.__name__ = "GetListResponse_Holder"
            self.pyclass = Holder

    class GetList2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetList2"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetList2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","QueryForm",lazy=False)(pname=(ns,"QueryForm"), aname="_QueryForm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.net","QueryControl",lazy=False)(pname=(ns,"QueryControl"), aname="_QueryControl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetList2")
            kw["aname"] = "_GetList2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._QueryForm = None
                    self._QueryControl = None
                    return
            Holder.__name__ = "GetList2_Holder"
            self.pyclass = Holder

    class GetList2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetList2Response"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetList2Response_Dec.schema
            TClist = [GTD("http://www.interfax.net","FaxQueryResult",lazy=False)(pname=(ns,"GetList2Result"), aname="_GetList2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetList2Response")
            kw["aname"] = "_GetList2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetList2Result = None
                    return
            Holder.__name__ = "GetList2Response_Holder"
            self.pyclass = Holder

    class GetImageChunkEx2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetImageChunkEx2"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetImageChunkEx2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MarkAsRead"), aname="_MarkAsRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"ChunkSize"), aname="_ChunkSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"From"), aname="_From", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetImageChunkEx2")
            kw["aname"] = "_GetImageChunkEx2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MessageID = None
                    self._MarkAsRead = None
                    self._ChunkSize = None
                    self._From = None
                    return
            Holder.__name__ = "GetImageChunkEx2_Holder"
            self.pyclass = Holder

    class GetImageChunkEx2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetImageChunkEx2Response"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetImageChunkEx2Response_Dec.schema
            TClist = [GTD("http://www.interfax.net","ImageChunkResult",lazy=False)(pname=(ns,"GetImageChunkEx2Result"), aname="_GetImageChunkEx2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetImageChunkEx2Response")
            kw["aname"] = "_GetImageChunkEx2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetImageChunkEx2Result = None
                    return
            Holder.__name__ = "GetImageChunkEx2Response_Holder"
            self.pyclass = Holder

    class GetImageChunk_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetImageChunk"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetImageChunk_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"MarkAsRead"), aname="_MarkAsRead", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"ChunkSize"), aname="_ChunkSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"From"), aname="_From", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Image"), aname="_Image", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetImageChunk")
            kw["aname"] = "_GetImageChunk"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._MessageID = None
                    self._MarkAsRead = None
                    self._ChunkSize = None
                    self._From = None
                    self._Image = None
                    return
            Holder.__name__ = "GetImageChunk_Holder"
            self.pyclass = Holder

    class GetImageChunkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetImageChunkResponse"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.GetImageChunkResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"GetImageChunkResult"), aname="_GetImageChunkResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Image"), aname="_Image", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","GetImageChunkResponse")
            kw["aname"] = "_GetImageChunkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetImageChunkResult = None
                    self._Image = None
                    return
            Holder.__name__ = "GetImageChunkResponse_Holder"
            self.pyclass = Holder

    class MarkMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MarkMessage"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.MarkMessage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"Read"), aname="_Read", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","MarkMessage")
            kw["aname"] = "_MarkMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._Read = None
                    self._MessageID = None
                    return
            Holder.__name__ = "MarkMessage_Holder"
            self.pyclass = Holder

    class MarkMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "MarkMessageResponse"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            ns = ns0.MarkMessageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"MarkMessageResult"), aname="_MarkMessageResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.net","MarkMessageResponse")
            kw["aname"] = "_MarkMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._MarkMessageResult = None
                    return
            Holder.__name__ = "MarkMessageResponse_Holder"
            self.pyclass = Holder

    class ResendResult_Dec(ElementDeclaration):
        literal = "ResendResult"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.net","ResendResult")
            kw["aname"] = "_ResendResult"
            if ns0.ResendResult_Def not in ns0.ResendResult_Dec.__bases__:
                bases = list(ns0.ResendResult_Dec.__bases__)
                bases.insert(0, ns0.ResendResult_Def)
                ns0.ResendResult_Dec.__bases__ = tuple(bases)

            ns0.ResendResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ResendResult_Dec_Holder"

    class InboundEmailsResult_Dec(ElementDeclaration):
        literal = "InboundEmailsResult"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.net","InboundEmailsResult")
            kw["aname"] = "_InboundEmailsResult"
            if ns0.InboundEmailsResult_Def not in ns0.InboundEmailsResult_Dec.__bases__:
                bases = list(ns0.InboundEmailsResult_Dec.__bases__)
                bases.insert(0, ns0.InboundEmailsResult_Def)
                ns0.InboundEmailsResult_Dec.__bases__ = tuple(bases)

            ns0.InboundEmailsResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "InboundEmailsResult_Dec_Holder"

    class ImageChunkResult_Dec(ElementDeclaration):
        literal = "ImageChunkResult"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.net","ImageChunkResult")
            kw["aname"] = "_ImageChunkResult"
            if ns0.ImageChunkResult_Def not in ns0.ImageChunkResult_Dec.__bases__:
                bases = list(ns0.ImageChunkResult_Dec.__bases__)
                bases.insert(0, ns0.ImageChunkResult_Def)
                ns0.ImageChunkResult_Dec.__bases__ = tuple(bases)

            ns0.ImageChunkResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ImageChunkResult_Dec_Holder"

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://www.interfax.net"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.net","int")
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

# end class ns0 (tns: http://www.interfax.net)
