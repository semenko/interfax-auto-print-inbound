################################################## 
# InterFax_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://www.interfax.cc
##############################

class ns0:
    targetNamespace = "http://www.interfax.cc"

    class ListPPResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ListPPResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ListPPResult_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"Valid"), aname="_Valid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"AccountID"), aname="_AccountID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CurrencyCode"), aname="_CurrencyCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DateFormat"), aname="_DateFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"AccountType"), aname="_AccountType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","ArrayOfPPCardDetails",lazy=False)(pname=(ns,"PPCardsDetails"), aname="_PPCardsDetails", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Valid = None
                    self._AccountID = None
                    self._CurrencyCode = None
                    self._DateFormat = None
                    self._AccountType = None
                    self._PPCardsDetails = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "ListPPResult_Holder"
            self.pyclass = Holder

    class ArrayOfPPCardDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ArrayOfPPCardDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfPPCardDetails_Def.schema
            TClist = [GTD("http://www.interfax.cc","PPCardDetails",lazy=False)(pname=(ns,"PPCardDetails"), aname="_PPCardDetails", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._PPCardDetails = []
                    return
            Holder.__name__ = "ArrayOfPPCardDetails_Holder"
            self.pyclass = Holder

    class PPCardDetails_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "PPCardDetails")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PPCardDetails_Def.schema
            TClist = [ZSI.TC.Decimal(pname=(ns,"Balance"), aname="_Balance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Bonus"), aname="_Bonus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CloseDate"), aname="_CloseDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"CurrentUsage"), aname="_CurrentUsage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"FaceValue"), aname="_FaceValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"IssueDate"), aname="_IssueDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PPCardID"), aname="_PPCardID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"PreviousCharge"), aname="_PreviousCharge", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PreviousPPCard"), aname="_PreviousPPCard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"OriginalBalance"), aname="_OriginalBalance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Balance = None
                    self._Bonus = None
                    self._CloseDate = None
                    self._CurrentUsage = None
                    self._FaceValue = None
                    self._IssueDate = None
                    self._PPCardID = None
                    self._PreviousCharge = None
                    self._PreviousPPCard = None
                    self._OriginalBalance = None
                    return
            Holder.__name__ = "PPCardDetails_Holder"
            self.pyclass = Holder

    class PPCardResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "PPCardResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PPCardResult_Def.schema
            TClist = [GTD("http://www.interfax.cc","PPCardDetails",lazy=False)(pname=(ns,"Details"), aname="_Details", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Details = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "PPCardResult_Holder"
            self.pyclass = Holder

    class PPCardTransactions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "PPCardTransactions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PPCardTransactions_Def.schema
            TClist = [GTD("http://www.interfax.cc","ArrayOfFaxItemEx",lazy=False)(pname=(ns,"Transactions"), aname="_Transactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalNumOfTransactions"), aname="_TotalNumOfTransactions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Currency"), aname="_Currency", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"FirstResult"), aname="_FirstResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfResults"), aname="_NumOfResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"LastBalance"), aname="_LastBalance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Transactions = None
                    self._TotalNumOfTransactions = None
                    self._Currency = None
                    self._FirstResult = None
                    self._NumOfResults = None
                    self._ResultCode = None
                    self._LastBalance = None
                    return
            Holder.__name__ = "PPCardTransactions_Holder"
            self.pyclass = Holder

    class ArrayOfFaxItemEx_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ArrayOfFaxItemEx")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFaxItemEx_Def.schema
            TClist = [GTD("http://www.interfax.cc","FaxItemEx",lazy=False)(pname=(ns,"FaxItemEx"), aname="_FaxItemEx", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxItemEx = []
                    return
            Holder.__name__ = "ArrayOfFaxItemEx_Holder"
            self.pyclass = Holder

    class FaxItemEx_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "FaxItemEx")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaxItemEx_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ParentTransactionID"), aname="_ParentTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SubmitTime"), aname="_SubmitTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"PostponeTime"), aname="_PostponeTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserID"), aname="_UserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobID"), aname="_JobID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DestinationFax"), aname="_DestinationFax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReplyEmail"), aname="_ReplyEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemoteCSID"), aname="_RemoteCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSent"), aname="_PagesSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Duration"), aname="_Duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSubmitted"), aname="_PagesSubmitted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SenderCSID"), aname="_SenderCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"Priority"), aname="_Priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Units"), aname="_Units", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"CostPerUnit"), aname="_CostPerUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageSize"), aname="_PageSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageOrientation"), aname="_PageOrientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageResolution"), aname="_PageResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RenderingQuality"), aname="_RenderingQuality", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageHeader"), aname="_PageHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"RetriesToPerform"), aname="_RetriesToPerform", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"TrialsPerformed"), aname="_TrialsPerformed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParentTransactionID = None
                    self._TransactionID = None
                    self._SubmitTime = None
                    self._PostponeTime = None
                    self._CompletionTime = None
                    self._UserID = None
                    self._Contact = None
                    self._JobID = None
                    self._DestinationFax = None
                    self._ReplyEmail = None
                    self._RemoteCSID = None
                    self._PagesSent = None
                    self._Status = None
                    self._Duration = None
                    self._Subject = None
                    self._PagesSubmitted = None
                    self._SenderCSID = None
                    self._Priority = None
                    self._Units = None
                    self._CostPerUnit = None
                    self._PageSize = None
                    self._PageOrientation = None
                    self._PageResolution = None
                    self._RenderingQuality = None
                    self._PageHeader = None
                    self._RetriesToPerform = None
                    self._TrialsPerformed = None
                    return
            Holder.__name__ = "FaxItemEx_Holder"
            self.pyclass = Holder

    class PPCardTrasnactionsByteArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "PPCardTrasnactionsByteArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.PPCardTrasnactionsByteArray_Def.schema
            TClist = [ZSI.TC.Base64String(pname=(ns,"Transactions"), aname="_Transactions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Transactions = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "PPCardTrasnactionsByteArray_Holder"
            self.pyclass = Holder

    class QueryForm_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "QueryForm")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryForm_Def.schema
            TClist = [GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"Subject"), aname="_Subject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DateFrom"), aname="_DateFrom", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"DateTo"), aname="_DateTo", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"UserID"), aname="_UserID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"ReplyAddress"), aname="_ReplyAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"ParentTransactionID"), aname="_ParentTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryCondition",lazy=False)(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ShowHiddenTransactions"), aname="_ShowHiddenTransactions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Subject = None
                    self._FaxNumber = None
                    self._DateFrom = None
                    self._DateTo = None
                    self._UserID = None
                    self._ReplyAddress = None
                    self._TransactionID = None
                    self._ParentTransactionID = None
                    self._Status = None
                    self._ShowHiddenTransactions = None
                    return
            Holder.__name__ = "QueryForm_Holder"
            self.pyclass = Holder

    class QueryCondition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "QueryCondition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryCondition_Def.schema
            TClist = [GTD("http://www.interfax.cc","SQLOperatorEnum",lazy=False)(pname=(ns,"Verb"), aname="_Verb", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VerbData"), aname="_VerbData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Verb = None
                    self._VerbData = None
                    return
            Holder.__name__ = "QueryCondition_Holder"
            self.pyclass = Holder

    class SQLOperatorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "SQLOperatorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class QueryControl_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "QueryControl")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.QueryControl_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"OnlyParents"), aname="_OnlyParents", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfResults"), aname="_NumOfResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"StartingRecord"), aname="_StartingRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","OrderByColumnEnum",lazy=False)(pname=(ns,"OrderBy"), aname="_OrderBy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"AscOrderDirection"), aname="_AscOrderDirection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ReturnItems"), aname="_ReturnItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"ReturnStats"), aname="_ReturnStats", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._OnlyParents = None
                    self._NumOfResults = None
                    self._StartingRecord = None
                    self._OrderBy = None
                    self._AscOrderDirection = None
                    self._ReturnItems = None
                    self._ReturnStats = None
                    return
            Holder.__name__ = "QueryControl_Holder"
            self.pyclass = Holder

    class OrderByColumnEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "OrderByColumnEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FaxQueryResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "FaxQueryResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaxQueryResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","ArrayOfFaxItemEx2",lazy=False)(pname=(ns,"FaxItems"), aname="_FaxItems", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","ArrayOfStatusCount",lazy=False)(pname=(ns,"Stats"), aname="_Stats", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ErrorsDescriptionHTMLFormat"), aname="_ErrorsDescriptionHTMLFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalTransactionsNum"), aname="_TotalTransactionsNum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResultCode = None
                    self._FaxItems = None
                    self._Stats = None
                    self._ErrorsDescriptionHTMLFormat = None
                    self._TotalTransactionsNum = None
                    return
            Holder.__name__ = "FaxQueryResult_Holder"
            self.pyclass = Holder

    class ArrayOfFaxItemEx2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ArrayOfFaxItemEx2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFaxItemEx2_Def.schema
            TClist = [GTD("http://www.interfax.cc","FaxItemEx2",lazy=False)(pname=(ns,"FaxItemEx2"), aname="_FaxItemEx2", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxItemEx2 = []
                    return
            Holder.__name__ = "ArrayOfFaxItemEx2_Holder"
            self.pyclass = Holder

    class FaxItemEx2_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "FaxItemEx2")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaxItemEx2_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"ParentTransactionID"), aname="_ParentTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SubmitTime"), aname="_SubmitTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"PostponeTime"), aname="_PostponeTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserID"), aname="_UserID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Contact"), aname="_Contact", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobID"), aname="_JobID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DestinationFax"), aname="_DestinationFax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReplyEmail"), aname="_ReplyEmail", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemoteCSID"), aname="_RemoteCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSent"), aname="_PagesSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Duration"), aname="_Duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSubmitted"), aname="_PagesSubmitted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SenderCSID"), aname="_SenderCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"Priority"), aname="_Priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"Units"), aname="_Units", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Decimal(pname=(ns,"CostPerUnit"), aname="_CostPerUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageSize"), aname="_PageSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageOrientation"), aname="_PageOrientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageResolution"), aname="_PageResolution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RenderingQuality"), aname="_RenderingQuality", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageHeader"), aname="_PageHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"RetriesToPerform"), aname="_RetriesToPerform", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"TrialsPerformed"), aname="_TrialsPerformed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"LocaleID"), aname="_LocaleID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"GMTBias"), aname="_GMTBias", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RetriesInterval"), aname="_RetriesInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"UserData"), aname="_UserData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DeleteAfterUsage"), aname="_DeleteAfterUsage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Mode"), aname="_Mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfTransactions"), aname="_NumOfTransactions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"MessageID"), aname="_MessageID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ParentTransactionID = None
                    self._TransactionID = None
                    self._SubmitTime = None
                    self._PostponeTime = None
                    self._CompletionTime = None
                    self._UserID = None
                    self._Contact = None
                    self._JobID = None
                    self._DestinationFax = None
                    self._ReplyEmail = None
                    self._RemoteCSID = None
                    self._PagesSent = None
                    self._Status = None
                    self._Duration = None
                    self._Subject = None
                    self._PagesSubmitted = None
                    self._SenderCSID = None
                    self._Priority = None
                    self._Units = None
                    self._CostPerUnit = None
                    self._PageSize = None
                    self._PageOrientation = None
                    self._PageResolution = None
                    self._RenderingQuality = None
                    self._PageHeader = None
                    self._RetriesToPerform = None
                    self._TrialsPerformed = None
                    self._LocaleID = None
                    self._GMTBias = None
                    self._RetriesInterval = None
                    self._UserData = None
                    self._DeleteAfterUsage = None
                    self._Mode = None
                    self._NumOfTransactions = None
                    self._MessageID = None
                    return
            Holder.__name__ = "FaxItemEx2_Holder"
            self.pyclass = Holder

    class ArrayOfStatusCount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ArrayOfStatusCount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfStatusCount_Def.schema
            TClist = [GTD("http://www.interfax.cc","StatusCount",lazy=False)(pname=(ns,"StatusCount"), aname="_StatusCount", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._StatusCount = []
                    return
            Holder.__name__ = "ArrayOfStatusCount_Holder"
            self.pyclass = Holder

    class StatusCount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "StatusCount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.StatusCount_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Count"), aname="_Count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Status = None
                    self._Count = None
                    return
            Holder.__name__ = "StatusCount_Holder"
            self.pyclass = Holder

    class ArrayOfFaxItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "ArrayOfFaxItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ArrayOfFaxItem_Def.schema
            TClist = [GTD("http://www.interfax.cc","FaxItem",lazy=False)(pname=(ns,"FaxItem"), aname="_FaxItem", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxItem = []
                    return
            Holder.__name__ = "ArrayOfFaxItem_Holder"
            self.pyclass = Holder

    class FaxItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.interfax.cc"
        type = (schema, "FaxItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.FaxItem_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"SubmitTime"), aname="_SubmitTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"PostponeTime"), aname="_PostponeTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"CompletionTime"), aname="_CompletionTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"DestinationFax"), aname="_DestinationFax", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"RemoteCSID"), aname="_RemoteCSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSent"), aname="_PagesSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Status"), aname="_Status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Duration"), aname="_Duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname=(ns,"PagesSubmitted"), aname="_PagesSubmitted", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._TransactionID = None
                    self._SubmitTime = None
                    self._PostponeTime = None
                    self._CompletionTime = None
                    self._DestinationFax = None
                    self._RemoteCSID = None
                    self._PagesSent = None
                    self._Status = None
                    self._Duration = None
                    self._Subject = None
                    self._PagesSubmitted = None
                    return
            Holder.__name__ = "FaxItem_Holder"
            self.pyclass = Holder

    class GetListPP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetListPP"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetListPP_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetListPP")
            kw["aname"] = "_GetListPP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    return
            Holder.__name__ = "GetListPP_Holder"
            self.pyclass = Holder

    class GetListPPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetListPPResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetListPPResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","ListPPResult",lazy=False)(pname=(ns,"GetListPPResult"), aname="_GetListPPResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetListPPResponse")
            kw["aname"] = "_GetListPPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetListPPResult = None
                    return
            Holder.__name__ = "GetListPPResponse_Holder"
            self.pyclass = Holder

    class GetPPCardDetails_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardDetails"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardDetails_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PPCardID"), aname="_PPCardID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardDetails")
            kw["aname"] = "_GetPPCardDetails"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._PPCardID = None
                    return
            Holder.__name__ = "GetPPCardDetails_Holder"
            self.pyclass = Holder

    class GetPPCardDetailsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardDetailsResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardDetailsResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","PPCardResult",lazy=False)(pname=(ns,"GetPPCardDetailsResult"), aname="_GetPPCardDetailsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardDetailsResponse")
            kw["aname"] = "_GetPPCardDetailsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetPPCardDetailsResult = None
                    return
            Holder.__name__ = "GetPPCardDetailsResponse_Holder"
            self.pyclass = Holder

    class GetPPCardTransactions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardTransactions"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardTransactions_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"PPCardID"), aname="_PPCardID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"FirstResult"), aname="_FirstResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"NumOfResults"), aname="_NumOfResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardTransactions")
            kw["aname"] = "_GetPPCardTransactions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._PPCardID = None
                    self._FirstResult = None
                    self._NumOfResults = None
                    return
            Holder.__name__ = "GetPPCardTransactions_Holder"
            self.pyclass = Holder

    class GetPPCardTransactionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardTransactionsResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardTransactionsResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","PPCardTransactions",lazy=False)(pname=(ns,"GetPPCardTransactionsResult"), aname="_GetPPCardTransactionsResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardTransactionsResponse")
            kw["aname"] = "_GetPPCardTransactionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetPPCardTransactionsResult = None
                    return
            Holder.__name__ = "GetPPCardTransactionsResponse_Holder"
            self.pyclass = Holder

    class GetPPCardTransactionsAsByteArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardTransactionsAsByteArray"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardTransactionsAsByteArray_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Year"), aname="_Year", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"Month"), aname="_Month", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardTransactionsAsByteArray")
            kw["aname"] = "_GetPPCardTransactionsAsByteArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._Year = None
                    self._Month = None
                    return
            Holder.__name__ = "GetPPCardTransactionsAsByteArray_Holder"
            self.pyclass = Holder

    class GetPPCardTransactionsAsByteArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetPPCardTransactionsAsByteArrayResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetPPCardTransactionsAsByteArrayResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","PPCardTrasnactionsByteArray",lazy=False)(pname=(ns,"GetPPCardTransactionsAsByteArrayResult"), aname="_GetPPCardTransactionsAsByteArrayResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetPPCardTransactionsAsByteArrayResponse")
            kw["aname"] = "_GetPPCardTransactionsAsByteArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetPPCardTransactionsAsByteArrayResult = None
                    return
            Holder.__name__ = "GetPPCardTransactionsAsByteArrayResponse_Holder"
            self.pyclass = Holder

    class FaxStatusEx_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatusEx"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatusEx_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"LastTransactionID"), aname="_LastTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxItems"), aname="_MaxItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatusEx")
            kw["aname"] = "_FaxStatusEx"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._LastTransactionID = None
                    self._MaxItems = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatusEx_Holder"
            self.pyclass = Holder

    class FaxStatusExResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatusExResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatusExResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","ArrayOfFaxItemEx",lazy=False)(pname=(ns,"FaxStatusExResult"), aname="_FaxStatusExResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatusExResponse")
            kw["aname"] = "_FaxStatusExResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxStatusExResult = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatusExResponse_Holder"
            self.pyclass = Holder

    class FaxQuery2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxQuery2"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxQuery2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryForm",lazy=False)(pname=(ns,"QueryForm"), aname="_QueryForm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.interfax.cc","QueryControl",lazy=False)(pname=(ns,"QueryControl"), aname="_QueryControl", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxQuery2")
            kw["aname"] = "_FaxQuery2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._QueryForm = None
                    self._QueryControl = None
                    return
            Holder.__name__ = "FaxQuery2_Holder"
            self.pyclass = Holder

    class FaxQuery2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxQuery2Response"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxQuery2Response_Dec.schema
            TClist = [GTD("http://www.interfax.cc","FaxQueryResult",lazy=False)(pname=(ns,"FaxQuery2Result"), aname="_FaxQuery2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxQuery2Response")
            kw["aname"] = "_FaxQuery2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxQuery2Result = None
                    return
            Holder.__name__ = "FaxQuery2Response_Holder"
            self.pyclass = Holder

    class FaxQuery_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxQuery"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxQuery_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Verb"), aname="_Verb", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"VerbData"), aname="_VerbData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxItems"), aname="_MaxItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxQuery")
            kw["aname"] = "_FaxQuery"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._Verb = None
                    self._VerbData = None
                    self._MaxItems = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxQuery_Holder"
            self.pyclass = Holder

    class FaxQueryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxQueryResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxQueryResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","ArrayOfFaxItemEx",lazy=False)(pname=(ns,"FaxQueryResult"), aname="_FaxQueryResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxQueryResponse")
            kw["aname"] = "_FaxQueryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxQueryResult = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxQueryResponse_Holder"
            self.pyclass = Holder

    class FaxStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatus"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatus_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"LastTransactionID"), aname="_LastTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxItems"), aname="_MaxItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatus")
            kw["aname"] = "_FaxStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._LastTransactionID = None
                    self._MaxItems = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatus_Holder"
            self.pyclass = Holder

    class FaxStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatusResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatusResponse_Dec.schema
            TClist = [GTD("http://www.interfax.cc","ArrayOfFaxItem",lazy=False)(pname=(ns,"FaxStatusResult"), aname="_FaxStatusResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatusResponse")
            kw["aname"] = "_FaxStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxStatusResult = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatusResponse_Holder"
            self.pyclass = Holder

    class FaxStatusXML_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatusXML"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatusXML_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"LastTransactionID"), aname="_LastTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"MaxItems"), aname="_MaxItems", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatusXML")
            kw["aname"] = "_FaxStatusXML"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._LastTransactionID = None
                    self._MaxItems = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatusXML_Holder"
            self.pyclass = Holder

    class FaxStatusXMLResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "FaxStatusXMLResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.FaxStatusXMLResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"FaxStatusXMLResult"), aname="_FaxStatusXMLResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TotalCount"), aname="_TotalCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ListSize"), aname="_ListSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"ResultCode"), aname="_ResultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","FaxStatusXMLResponse")
            kw["aname"] = "_FaxStatusXMLResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FaxStatusXMLResult = None
                    self._TotalCount = None
                    self._ListSize = None
                    self._ResultCode = None
                    return
            Holder.__name__ = "FaxStatusXMLResponse_Holder"
            self.pyclass = Holder

    class SendCharFax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendCharFax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendCharFax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Data"), aname="_Data", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileType"), aname="_FileType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendCharFax")
            kw["aname"] = "_SendCharFax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._FaxNumber = None
                    self._Data = None
                    self._FileType = None
                    return
            Holder.__name__ = "SendCharFax_Holder"
            self.pyclass = Holder

    class SendCharFaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendCharFaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendCharFaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"SendCharFaxResult"), aname="_SendCharFaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendCharFaxResponse")
            kw["aname"] = "_SendCharFaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendCharFaxResult = None
                    return
            Holder.__name__ = "SendCharFaxResponse_Holder"
            self.pyclass = Holder

    class Sendfax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "Sendfax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.Sendfax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FileData"), aname="_FileData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileType"), aname="_FileType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","Sendfax")
            kw["aname"] = "_Sendfax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._FaxNumber = None
                    self._FileData = None
                    self._FileType = None
                    return
            Holder.__name__ = "Sendfax_Holder"
            self.pyclass = Holder

    class SendfaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendfaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendfaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"SendfaxResult"), aname="_SendfaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendfaxResponse")
            kw["aname"] = "_SendfaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendfaxResult = None
                    return
            Holder.__name__ = "SendfaxResponse_Holder"
            self.pyclass = Holder

    class CancelFax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelFax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.CancelFax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","CancelFax")
            kw["aname"] = "_CancelFax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._TransactionID = None
                    return
            Holder.__name__ = "CancelFax_Holder"
            self.pyclass = Holder

    class CancelFaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelFaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.CancelFaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"CancelFaxResult"), aname="_CancelFaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","CancelFaxResponse")
            kw["aname"] = "_CancelFaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelFaxResult = None
                    return
            Holder.__name__ = "CancelFaxResponse_Holder"
            self.pyclass = Holder

    class SendfaxEx_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendfaxEx"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendfaxEx_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumbers"), aname="_FaxNumbers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FilesData"), aname="_FilesData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileTypes"), aname="_FileTypes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileSizes"), aname="_FileSizes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"Postpone"), aname="_Postpone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsHighResolution"), aname="_IsHighResolution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CSID"), aname="_CSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReplyAddress"), aname="_ReplyAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendfaxEx")
            kw["aname"] = "_SendfaxEx"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._FaxNumbers = None
                    self._FilesData = None
                    self._FileTypes = None
                    self._FileSizes = None
                    self._Postpone = None
                    self._IsHighResolution = None
                    self._CSID = None
                    self._Subject = None
                    self._ReplyAddress = None
                    return
            Holder.__name__ = "SendfaxEx_Holder"
            self.pyclass = Holder

    class SendfaxExResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendfaxExResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendfaxExResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"SendfaxExResult"), aname="_SendfaxExResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendfaxExResponse")
            kw["aname"] = "_SendfaxExResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendfaxExResult = None
                    return
            Holder.__name__ = "SendfaxExResponse_Holder"
            self.pyclass = Holder

    class SendfaxEx_2_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendfaxEx_2"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendfaxEx_2_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumbers"), aname="_FaxNumbers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Contacts"), aname="_Contacts", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"FilesData"), aname="_FilesData", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileTypes"), aname="_FileTypes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FileSizes"), aname="_FileSizes", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"Postpone"), aname="_Postpone", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"RetriesToPerform"), aname="_RetriesToPerform", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"CSID"), aname="_CSID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageHeader"), aname="_PageHeader", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"JobID"), aname="_JobID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ReplyAddress"), aname="_ReplyAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageSize"), aname="_PageSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"PageOrientation"), aname="_PageOrientation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsHighResolution"), aname="_IsHighResolution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsFineRendering"), aname="_IsFineRendering", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendfaxEx_2")
            kw["aname"] = "_SendfaxEx_2"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._FaxNumbers = None
                    self._Contacts = None
                    self._FilesData = None
                    self._FileTypes = None
                    self._FileSizes = None
                    self._Postpone = None
                    self._RetriesToPerform = None
                    self._CSID = None
                    self._PageHeader = None
                    self._JobID = None
                    self._Subject = None
                    self._ReplyAddress = None
                    self._PageSize = None
                    self._PageOrientation = None
                    self._IsHighResolution = None
                    self._IsFineRendering = None
                    return
            Holder.__name__ = "SendfaxEx_2_Holder"
            self.pyclass = Holder

    class SendfaxEx_2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendfaxEx_2Response"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendfaxEx_2Response_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"SendfaxEx_2Result"), aname="_SendfaxEx_2Result", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendfaxEx_2Response")
            kw["aname"] = "_SendfaxEx_2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendfaxEx_2Result = None
                    return
            Holder.__name__ = "SendfaxEx_2Response_Holder"
            self.pyclass = Holder

    class ResendBroadcastFax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResendBroadcastFax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.ResendBroadcastFax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"ParentTransactionID"), aname="_ParentTransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Subject"), aname="_Subject", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"SendErrorsOnly"), aname="_SendErrorsOnly", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","ResendBroadcastFax")
            kw["aname"] = "_ResendBroadcastFax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._ParentTransactionID = None
                    self._Subject = None
                    self._SendErrorsOnly = None
                    return
            Holder.__name__ = "ResendBroadcastFax_Holder"
            self.pyclass = Holder

    class ResendBroadcastFaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ResendBroadcastFaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.ResendBroadcastFaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"ResendBroadcastFaxResult"), aname="_ResendBroadcastFaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","ResendBroadcastFaxResponse")
            kw["aname"] = "_ResendBroadcastFaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ResendBroadcastFaxResult = None
                    return
            Holder.__name__ = "ResendBroadcastFaxResponse_Holder"
            self.pyclass = Holder

    class ReSendFax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReSendFax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.ReSendFax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"FaxNumber"), aname="_FaxNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","ReSendFax")
            kw["aname"] = "_ReSendFax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._TransactionID = None
                    self._FaxNumber = None
                    return
            Holder.__name__ = "ReSendFax_Holder"
            self.pyclass = Holder

    class ReSendFaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ReSendFaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.ReSendFaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"ReSendFaxResult"), aname="_ReSendFaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","ReSendFaxResponse")
            kw["aname"] = "_ReSendFaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ReSendFaxResult = None
                    return
            Holder.__name__ = "ReSendFaxResponse_Holder"
            self.pyclass = Holder

    class GetFaxImage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetFaxImage"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetFaxImage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Image"), aname="_Image", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetFaxImage")
            kw["aname"] = "_GetFaxImage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._TransactionID = None
                    self._Image = None
                    return
            Holder.__name__ = "GetFaxImage_Holder"
            self.pyclass = Holder

    class GetFaxImageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetFaxImageResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetFaxImageResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"GetFaxImageResult"), aname="_GetFaxImageResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Image"), aname="_Image", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetFaxImageResponse")
            kw["aname"] = "_GetFaxImageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetFaxImageResult = None
                    self._Image = None
                    return
            Holder.__name__ = "GetFaxImageResponse_Holder"
            self.pyclass = Holder

    class HideFax_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HideFax"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.HideFax_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"TransactionID"), aname="_TransactionID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","HideFax")
            kw["aname"] = "_HideFax"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._TransactionID = None
                    return
            Holder.__name__ = "HideFax_Holder"
            self.pyclass = Holder

    class HideFaxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "HideFaxResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.HideFaxResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"HideFaxResult"), aname="_HideFaxResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","HideFaxResponse")
            kw["aname"] = "_HideFaxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._HideFaxResult = None
                    return
            Holder.__name__ = "HideFaxResponse_Holder"
            self.pyclass = Holder

    class SendWordMailMerge_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendWordMailMerge"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendWordMailMerge_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Document"), aname="_Document", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"List"), aname="_List", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Options"), aname="_Options", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendWordMailMerge")
            kw["aname"] = "_SendWordMailMerge"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._Document = None
                    self._List = None
                    self._Options = None
                    return
            Holder.__name__ = "SendWordMailMerge_Holder"
            self.pyclass = Holder

    class SendWordMailMergeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "SendWordMailMergeResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.SendWordMailMergeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"SendWordMailMergeResult"), aname="_SendWordMailMergeResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","SendWordMailMergeResponse")
            kw["aname"] = "_SendWordMailMergeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SendWordMailMergeResult = None
                    return
            Holder.__name__ = "SendWordMailMergeResponse_Holder"
            self.pyclass = Holder

    class GetSupportedFileTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSupportedFileTypes"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetSupportedFileTypes_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.interfax.cc","GetSupportedFileTypes")
            kw["aname"] = "_GetSupportedFileTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "GetSupportedFileTypes_Holder"
            self.pyclass = Holder

    class GetSupportedFileTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "GetSupportedFileTypesResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.GetSupportedFileTypesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"GetSupportedFileTypesResult"), aname="_GetSupportedFileTypesResult", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","GetSupportedFileTypesResponse")
            kw["aname"] = "_GetSupportedFileTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._GetSupportedFileTypesResult = None
                    return
            Holder.__name__ = "GetSupportedFileTypesResponse_Holder"
            self.pyclass = Holder

    class IsSupportedFileType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IsSupportedFileType"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.IsSupportedFileType_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"FileType"), aname="_FileType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","IsSupportedFileType")
            kw["aname"] = "_IsSupportedFileType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._FileType = None
                    return
            Holder.__name__ = "IsSupportedFileType_Holder"
            self.pyclass = Holder

    class IsSupportedFileTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IsSupportedFileTypeResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.IsSupportedFileTypeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"IsSupportedFileTypeResult"), aname="_IsSupportedFileTypeResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","IsSupportedFileTypeResponse")
            kw["aname"] = "_IsSupportedFileTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._IsSupportedFileTypeResult = None
                    return
            Holder.__name__ = "IsSupportedFileTypeResponse_Holder"
            self.pyclass = Holder

    class StartFileUpload_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StartFileUpload"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.StartFileUpload_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"Username"), aname="_Username", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"Password"), aname="_Password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SessionID"), aname="_SessionID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","StartFileUpload")
            kw["aname"] = "_StartFileUpload"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._Username = None
                    self._Password = None
                    self._SessionID = None
                    return
            Holder.__name__ = "StartFileUpload_Holder"
            self.pyclass = Holder

    class StartFileUploadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "StartFileUploadResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.StartFileUploadResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"StartFileUploadResult"), aname="_StartFileUploadResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SessionID"), aname="_SessionID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","StartFileUploadResponse")
            kw["aname"] = "_StartFileUploadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._StartFileUploadResult = None
                    self._SessionID = None
                    return
            Holder.__name__ = "StartFileUploadResponse_Holder"
            self.pyclass = Holder

    class UploadFileChunk_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UploadFileChunk"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.UploadFileChunk_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"SessionID"), aname="_SessionID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"Chunk"), aname="_Chunk", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"IsLast"), aname="_IsLast", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","UploadFileChunk")
            kw["aname"] = "_UploadFileChunk"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SessionID = None
                    self._Chunk = None
                    self._IsLast = None
                    return
            Holder.__name__ = "UploadFileChunk_Holder"
            self.pyclass = Holder

    class UploadFileChunkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "UploadFileChunkResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.UploadFileChunkResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"UploadFileChunkResult"), aname="_UploadFileChunkResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","UploadFileChunkResponse")
            kw["aname"] = "_UploadFileChunkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._UploadFileChunkResult = None
                    return
            Holder.__name__ = "UploadFileChunkResponse_Holder"
            self.pyclass = Holder

    class CancelFileUpload_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelFileUpload"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.CancelFileUpload_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"SessionID"), aname="_SessionID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","CancelFileUpload")
            kw["aname"] = "_CancelFileUpload"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._SessionID = None
                    return
            Holder.__name__ = "CancelFileUpload_Holder"
            self.pyclass = Holder

    class CancelFileUploadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "CancelFileUploadResponse"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            ns = ns0.CancelFileUploadResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"CancelFileUploadResult"), aname="_CancelFileUploadResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.interfax.cc","CancelFileUploadResponse")
            kw["aname"] = "_CancelFileUploadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._CancelFileUploadResult = None
                    return
            Holder.__name__ = "CancelFileUploadResponse_Holder"
            self.pyclass = Holder

    class ListPPResult_Dec(ElementDeclaration):
        literal = "ListPPResult"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","ListPPResult")
            kw["aname"] = "_ListPPResult"
            if ns0.ListPPResult_Def not in ns0.ListPPResult_Dec.__bases__:
                bases = list(ns0.ListPPResult_Dec.__bases__)
                bases.insert(0, ns0.ListPPResult_Def)
                ns0.ListPPResult_Dec.__bases__ = tuple(bases)

            ns0.ListPPResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "ListPPResult_Dec_Holder"

    class PPCardResult_Dec(ElementDeclaration):
        literal = "PPCardResult"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","PPCardResult")
            kw["aname"] = "_PPCardResult"
            if ns0.PPCardResult_Def not in ns0.PPCardResult_Dec.__bases__:
                bases = list(ns0.PPCardResult_Dec.__bases__)
                bases.insert(0, ns0.PPCardResult_Def)
                ns0.PPCardResult_Dec.__bases__ = tuple(bases)

            ns0.PPCardResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PPCardResult_Dec_Holder"

    class PPCardTransactions_Dec(ElementDeclaration):
        literal = "PPCardTransactions"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","PPCardTransactions")
            kw["aname"] = "_PPCardTransactions"
            if ns0.PPCardTransactions_Def not in ns0.PPCardTransactions_Dec.__bases__:
                bases = list(ns0.PPCardTransactions_Dec.__bases__)
                bases.insert(0, ns0.PPCardTransactions_Def)
                ns0.PPCardTransactions_Dec.__bases__ = tuple(bases)

            ns0.PPCardTransactions_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PPCardTransactions_Dec_Holder"

    class PPCardTrasnactionsByteArray_Dec(ElementDeclaration):
        literal = "PPCardTrasnactionsByteArray"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","PPCardTrasnactionsByteArray")
            kw["aname"] = "_PPCardTrasnactionsByteArray"
            if ns0.PPCardTrasnactionsByteArray_Def not in ns0.PPCardTrasnactionsByteArray_Dec.__bases__:
                bases = list(ns0.PPCardTrasnactionsByteArray_Dec.__bases__)
                bases.insert(0, ns0.PPCardTrasnactionsByteArray_Def)
                ns0.PPCardTrasnactionsByteArray_Dec.__bases__ = tuple(bases)

            ns0.PPCardTrasnactionsByteArray_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "PPCardTrasnactionsByteArray_Dec_Holder"

    class long_Dec(ZSI.TCnumbers.Ilong, ElementDeclaration):
        literal = "long"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","long")
            kw["aname"] = "_long"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_long_immutable_holder"
            ZSI.TCnumbers.Ilong.__init__(self, **kw)

    class int_Dec(ZSI.TCnumbers.Iint, ElementDeclaration):
        literal = "int"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","int")
            kw["aname"] = "_int"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_int_immutable_holder"
            ZSI.TCnumbers.Iint.__init__(self, **kw)

    class string_Dec(ZSI.TC.String, ElementDeclaration):
        literal = "string"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","string")
            kw["aname"] = "_string"
            class IHolder(str): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_string_immutable_holder"
            ZSI.TC.String.__init__(self, **kw)

    class boolean_Dec(ZSI.TC.Boolean, ElementDeclaration):
        literal = "boolean"
        schema = "http://www.interfax.cc"
        def __init__(self, **kw):
            kw["pname"] = ("http://www.interfax.cc","boolean")
            kw["aname"] = "_boolean"
            class IHolder(int): typecode=self
            kw["pyclass"] = IHolder
            IHolder.__name__ = "_boolean_immutable_holder"
            ZSI.TC.Boolean.__init__(self, **kw)

# end class ns0 (tns: http://www.interfax.cc)

##############################
# targetNamespace
# http://www.interfax.cc/AbstractTypes
##############################

class ns1:
    targetNamespace = "http://www.interfax.cc/AbstractTypes"

    class StringArray_Def(ZSI.TC.Array, TypeDefinition):
        #complexType/complexContent base="SOAP-ENC:Array"
        schema = "http://www.interfax.cc/AbstractTypes"
        type = (schema, "StringArray")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ofwhat = None(None, typed=False)
            atype = None
            ZSI.TCcompound.Array.__init__(self, atype, ofwhat, pname=pname, childnames='item', **kw)

# end class ns1 (tns: http://www.interfax.cc/AbstractTypes)
